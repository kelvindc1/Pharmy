/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.Pessoa;
import lib.Order;
import java.util.List;
import javax.swing.JOptionPane;
import lib.Cabecalho;
import lib.Column;
import lib.Filter;
import lib.GenericList;
import lib.Operator;
import lib.Util;
import model.PessoaModel;

/**
 *
 * @author Cristiano Peiter <cristiano.peiter@universo.univates.br>
 */
public class EmployeeList extends GenericList<Pessoa> {

    public Cabecalho cabecalho;
    public Order order;
    public PessoaModel model;
    public List<Pessoa> objs;
    
    public EmployeeList() throws Exception 
    {
        //construct GenericList
        super(Pessoa.class);
        initComponents();

        //column adicionados no cabecalho da grid
        Column c1 = new Column("id", "Código");
        Column c2 = new Column("nome", "Nome", 400);
        Column c3 = new Column("email", "Email", 200);
        Column c4 = new Column("ref_cidade", "Cidade", 100, true, "nome" ,"cidade");

        //dados da tela
        super.setTitle("Pessoas");
        this.order = new Order("id");
        this.cabecalho = new Cabecalho(c1, c2, c3, c4);
        this.model = new PessoaModel();

        //popula tabela
        this.objs = this.model.getObjects(this.order);
        this.popularTabela(this.tableGrid, this.objs, this.cabecalho);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        filtros = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        nome = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        buscarButton = new javax.swing.JButton();
        limparButton = new javax.swing.JButton();
        novoButton = new javax.swing.JButton();
        editarButton = new javax.swing.JButton();
        excluirButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableGrid = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setForeground(java.awt.Color.white);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Filtros");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Código:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Nome:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Email:");

        id.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        nome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeActionPerformed(evt);
            }
        });

        email.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout filtrosLayout = new javax.swing.GroupLayout(filtros);
        filtros.setLayout(filtrosLayout);
        filtrosLayout.setHorizontalGroup(
            filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filtrosLayout.createSequentialGroup()
                        .addGroup(filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nome)
                            .addComponent(email, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
                    .addGroup(filtrosLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filtrosLayout.setVerticalGroup(
            filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(id, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nome, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(filtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(email, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addContainerGap())
        );

        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        limparButton.setText("Limpar");
        limparButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparButtonActionPerformed(evt);
            }
        });

        novoButton.setText("Novo");
        novoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoButtonActionPerformed(evt);
            }
        });

        editarButton.setText("Editar");
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButtonActionPerformed(evt);
            }
        });

        excluirButton.setText("Excluir");
        excluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirButtonActionPerformed(evt);
            }
        });

        tableGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tableGrid);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(buscarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(limparButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(novoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(excluirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(164, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filtros, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filtros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscarButton)
                    .addComponent(limparButton)
                    .addComponent(novoButton)
                    .addComponent(editarButton)
                    .addComponent(excluirButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        boolean filter_id = false;
        boolean filter_nome = false;
        boolean filter_email = false;
        Filter f1 = null;
        Filter f2 = null;
        Filter f3 = null;

        //filter id
        if (validarCampoVazio(this.id)) 
        {
            long campo_id = Long.parseLong(this.id.getText());
            f1 = new Filter(Operator.EQ, "id", campo_id);
            filter_id = true;
        }

        //filter nome
        if (validarCampoVazio(this.nome)) 
        {
            String campo_nome = this.nome.getText();
            f2 = new Filter(Operator.ILIKE, "nome", campo_nome);
            filter_nome = true;
        }

        //filter email
        if (validarCampoVazio(this.email)) 
        {
            String campo_email = this.email.getText();
            f3 = new Filter(Operator.ILIKE, "email", campo_email);
            filter_email = true;
        }

        //busca objetos
        try 
        {
            //identifica qual filtro foi utilizado
            if (filter_id && filter_nome && filter_email) 
            {
                this.objs = this.model.getObjects(this.order, f1, f2, f3);
            } 
            else if (filter_id && filter_nome && !filter_email) 
            {
                this.objs = this.model.getObjects(this.order, f1, f2);
            } 
            else if (!filter_id && filter_nome && filter_email) 
            {
                this.objs = this.model.getObjects(this.order, f2, f3);
            } 
            else if (filter_id && !filter_nome && filter_email) 
            {
                this.objs = this.model.getObjects(this.order, f1, f3);
            } 
            else if (!filter_id && filter_nome && !filter_email) 
            {
                this.objs = this.model.getObjects(this.order, f2);
            } 
            else if (filter_id && !filter_nome && !filter_email) 
            {
                this.objs = this.model.getObjects(this.order, f1);
            } 
            else if (!filter_id && !filter_nome && filter_email) 
            {
                this.objs = this.model.getObjects(this.order, f3);
            } 
            else if (!filter_id && !filter_nome) 
            {
                this.objs = this.model.getObjects(this.order);
            }
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao buscar os itens. \nErro: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try 
        {
            //popula tabela pelos filtros buscados
            popularTabela(this.tableGrid, this.objs, this.cabecalho);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao popular os itens. \nErro: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void limparButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparButtonActionPerformed
        try 
        {
            //limpar campos
            limparCampos(this.filtros);

            //popula tabela
            this.objs = this.model.getObjects(this.order);
            this.popularTabela(this.tableGrid, this.objs, this.cabecalho);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao popular os itens. \nErro: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_limparButtonActionPerformed

    private void novoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoButtonActionPerformed
        //controle da tela de cadastro
        try 
        {
            PessoaForm formPessoa = new PessoaForm(null, true);
            telaCadastro(formPessoa);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao iniciar a tela de cadastro. \nErro: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //controle de popular a tabela
        try 
        {
            //popula tabela com novos itens adicionados
            this.objs = this.model.getObjects(this.order);
            popularTabela(this.tableGrid, this.objs, this.cabecalho);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao popular os itens. \nErro: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_novoButtonActionPerformed

    private void editarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarButtonActionPerformed
        int campo_id = 0;

        //controle de selecionado
        try {
            //identifica id selecionado na tabela
            campo_id = Integer.parseInt(String.valueOf(tableGrid.getValueAt(tableGrid.getSelectedRow(), 0)));
            System.out.println(campo_id);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Selecione algum item para ser editado.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        //controle da tela de edição
        try {
            PessoaForm formPessoa = new PessoaForm(null, true, campo_id);
            System.out.println("formPessoa: "+formPessoa);
            telaCadastro(formPessoa);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao iniciar a tela de edição. \nErro: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //controle de popular a tabela
        try {
            //popula tabela com os itens alterados
            this.objs = this.model.getObjects(this.order);
            popularTabela(this.tableGrid, this.objs, this.cabecalho);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao popular os itens. \nErro: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_editarButtonActionPerformed

    private void excluirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirButtonActionPerformed
        int campo_id = 0;

        //controle selecionado
        try {
            //identifica id selecionado na tabela
            campo_id = Integer.parseInt(String.valueOf(tableGrid.getValueAt(tableGrid.getSelectedRow(), 0)));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Selecione algum item para ser excluido. ", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir o item " + campo_id + " ?", "Excluir", JOptionPane.YES_NO_OPTION);

        //controle para exclusão
        try {
            if (result == JOptionPane.YES_OPTION) {
                //exclui item
                this.model.delete(campo_id);

                //popula tabela com os itens alterados
                this.objs = this.model.getObjects(this.order);
                popularTabela(this.tableGrid, this.objs, this.cabecalho);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Não foi possivel excluir a pessoa, porque existe uma conta com este cadastro.", "Info", JOptionPane.INFORMATION_MESSAGE );
            return;
        }
    }//GEN-LAST:event_excluirButtonActionPerformed

    private void nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarButton;
    private javax.swing.JButton editarButton;
    private javax.swing.JTextField email;
    private javax.swing.JButton excluirButton;
    private javax.swing.JPanel filtros;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton limparButton;
    private javax.swing.JTextField nome;
    private javax.swing.JButton novoButton;
    private javax.swing.JTable tableGrid;
    // End of variables declaration//GEN-END:variables
}
